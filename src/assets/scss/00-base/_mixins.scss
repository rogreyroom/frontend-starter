// --Mixins--
// Strips units from css values
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Calculates base fonts size between min and max screen sizes
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1==$u2 and $u1==$u3 and $u1==$u4 {
    & {
      --fs-base: #{$min-font-size};

      @media screen and (min-width: $min-vw) {
        --fs-base: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }

      @media screen and (min-width: $max-vw) {
        --fs-base: #{$max-font-size};
      }
    }
  }
}

// Calculates max font size for giving modular scale number (https://www.modularscale.com/)
@function ms-size($base-font, $ms-ratio, $ms) {
  $wyn: 1;
  @for $var from 0 through $ms {
    $wyn: $wyn * $ms-ratio;
  }

  @return round((($base-font * $wyn) / $ms-ratio) * 1000) / 1000;
}

// Fallback mixin for css  properties
@mixin var($property, $variable) {
  #{$property}: map-get($vars, $variable);
  #{$property}: var(--#{$variable});
}
